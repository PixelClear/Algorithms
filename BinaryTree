#include <stdio.h>
#include <stdlib.h>



typedef struct tree{
    int data;
    struct tree* right;
    struct tree* left;
}Tree;



Tree* getNode(int data)
{
    Tree* node = (Tree*)malloc(sizeof(Tree));
    if(node != NULL)
    {
        node->data = data;
        node->right = NULL;
        node->left = NULL;
    }

    return node;
}

void insert(Tree* node, int data)
{
    if(node == NULL)
    {
        node = getNode(data);
    }

    if(data < node->data)
        insert(node->left, data);
    else if(data > node->data)
        insert(node->right, data);
}

int search(Tree* node, int data)
{
    if(node->data == data)
    {
        return data;
    }

    if(data < node->data)
    {
        return search(node->left, data);
    }
    else if(data > node->data)
    {
        return search(node->right, data);
    }

    return 0;
}

Tree* findMin(Tree* node)
{
    if(node == NULL)
        return NULL;

    if(node->left == NULL)
    {
        return node;
    }

    return findMin(node->left);
}


Tree* findMax(Tree* node)
{
    if(node == NULL)
        return NULL;

    if(node->right == NULL)
    {
        return node;
    }

    return findMax(node->right);
}

/*
 * Tree deletion is the hardest case of all.
 * Once we have found the node to delete we will consider following cases
 * I. Node is leaf node . We can delete the node immediately
 * II. Node has one child then we must adjust child link to parent of node
 * III. Node has two children - Replace data of node to be deleted with smallest node in right
 * subtree and then delete that smallest node. As smallest node in right subtree cant have left child
 * so removal is just case II
 * */

void remove(Tree* node, int data)
{
   if(node == NULL)
       return;

   if(data < node->data)
       remove(node->left, data);
   else if(data > node->data)
       remove(node->right, data);
   else if(node->left != NULL && node->right != NULL) //Two child node case III
   {
      node->data = findMin(node->right)->data;
      remove(node->right, node->data);

   }
   else //Case I & II
   {
       Tree* oldnode = node;
       node = (node->right != NULL) ? node->right : node->left;
       delete oldnode;
   }
}

int main()
{
    Tree* root = NULL;

}
